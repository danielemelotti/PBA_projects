str(subdat)
# Verifying the amount of unique transactions.
length(unique(subdata$ï..InvoiceNo))
# 5) Report the number of unique transactions made in these countries.
print(length(unique(subdat$ï..InvoiceNo)))
# 5) Report the number of unique transactions made in these countries.
print("the", length(unique(subdat$ï..InvoiceNo)))
# 5) Report the number of unique transactions made in these countries.
print(paste("The number of unique transactions made in the UK, Netherlands and Australia is: ", length(unique(subdat$ï..InvoiceNo))))
# 5) Report the number of unique transactions made in these countries.
print(paste("The number of unique transactions made in the UK, Netherlands and Australia is:", length(unique(subdat$ï..InvoiceNo))))
# 4) Report the average and standard deviation (round them up to 3 decimal points) of the UnitPrice:
print(paste("The average of the UnitPrice is:", round(mean(subdat$UnitPrice), 3)))
print(paste("The standard deviation of the UnitPrice is:", round(sd(subdat$UnitPrice), 3)))
print(paste("The average of the UnitPrice is:", round(mean(subdat$UnitPrice), 3)))
print(paste("The standard deviation of the UnitPrice is:", round(sd(subdat$UnitPrice), 3)))
head(subdat)
print(paste("The standard deviation of the UnitPrice is:", round(sd(subdat$UnitPrice), 3)))
# 4) Report the average and standard deviation (round them up to 3 decimal points) of the UnitPrice:
print(paste("The average of the UnitPrice is:", round(mean(subdat$UnitPrice), 3)))
#Respectively:
print(paste("The mean of Quantity is:", meanQ, "while the mean of UnitPrice is:", meanU))
# 4) Report the average and standard deviation (round them up to 3 decimal points) of the UnitPrice:
print(paste("The average of the UnitPrice is:", round(mean(subdat$UnitPrice), 3)))
head(subdat)
head(subdat, 500)
# 5) Report the number of unique transactions made in these countries.
uniq <- length(unique(subdat$ï..InvoiceNo))
print(paste("The number of unique transactions made in the UK, Netherlands and Australia is:", uniq))
# 6) How many customers residing in these countries made transactions in July and August of 2011?
print(paste("The number of customers residing in the U.K., Netherlands and Australia performing transactions in July and August 2011 is:", length(unique(subdat$CustomerID))))
head(subdat, 500)
#In-class Exercises from class 4
#set working directory
#setwd(dir = "C:\Users\danie\Documents\IMBA\SEMESTER 1\5. Programming for Business Analytics")
#import data
data <- read.table(file = "ISMS_Durable_Goods_Sample.txt", header = T, sep = "\t")
# Take a look at the data
head(data, 3)
str(data)
# 3) Convert date into obj.
data$date <- as.Date(x = data$TRANSACTION_DATE, format = "%d%b%Y:%H:%M:%S")
head(data)
time <- substr(data$TRANSACTION_DATE, start = 11, stop = nchar(data))
unique(time)
# 4) Print the number of unique households/customers that purchased at least once.
length(unique(data$HOUSEHOLD_ID))
# 5) Print the bottom 3 of male customers in their 30s
tail(subset(x = data, data$GENDER_H_HEAD == "M" & data$AGE_H_HEAD >= 30 & data$AGE_H_HEAD < 40), n = 3)
# 6) a. Use for loops to print summary stats (summary) of QUANTITY and UNIT_PRICE
i = 1
for(i in c(6, 7)) {
print(names(data))
print(summary(data[[i]]))
}
# 6) b. Compute the length of uniqeu values in each variable
for(i in 1:13) {
print(names(data))
print(length(unique(data[[i]])))
}
# 7) Subset the data for which the customers purchased a mobile device using subset()
unique(data$CATEGORY_DESCRIPTION)
subdata <- (subset(data, subset = data$CATEGORY_DESCRIPTION == "MOBILE"))
# 8)
mean(subdata$UNIT_PRICE)
sd(subdata$UNIT_PRICE)
# 9)
unique(data$RETURN_IND)
return <- subset(data, data$RETURN_IND == "Y")
length(unique(return$HOUSEHOLD_ID))
## e)
head(subdata)
ords <- data.frame()
ords <- read.csv(file = "online_retail.csv", stringsAsFactors = FALSE)
# Subsetting the data for the period of time between 2011/07 and 2011/08:
subdata <- (subset(ords, subset = ords$date >= "2011-07-01" & ords$date <= "2011-08-31"))
## e)
head(subdata)
## a)
# Importing the data:
ords <- data.frame()
ords <- read.csv(file = "online_retail.csv", stringsAsFactors = FALSE)
# Verifying that the data has been imported correctly:
head(ords)
str(ords)
# Verifying that the data has been imported correctly:
head(ords)
str(ords)
# Verifying that the data has been imported correctly:
head(ords)
## b)
# Converting InvoiceDate variable to date class:
ords$date <- as.Date(x = ords$InvoiceDate , format = "%m/%d/%Y %H:%M")
head(ords, 500)
# Verifying the amount of unique transactions.
length(unique(subdata$ï..InvoiceNo))
# Interestingly, I noticed that the name of the first variable (InvoiceNo) changes after loading the data to R and I am not sure why... I tried setting check.names = FALSE in the read.csv function but it does not help...
head(subdata)
# Interestingly, I noticed that the name of the first variable (InvoiceNo) changes after loading the data to R and I am not sure why... I tried setting check.names = FALSE in the read.csv function but it does not help...
head(subdata)
str(subdata)
### ASSIGNMENT 1 ###
## a)
# Importing the data:
ords <- data.frame()
ords <- read.csv(file = "online_retail.csv", stringsAsFactors = FALSE)
# Verifying that the data has been imported correctly:
head(ords)
str(ords)
## b)
# Converting InvoiceDate variable to date class:
ords$date <- as.Date(x = ords$InvoiceDate , format = "%m/%d/%Y %H:%M")
head(ords, 500)
# Subsetting the data for the period of time between 2011/07 and 2011/08:
subdata <- (subset(ords, subset = ords$date >= "2011-07-01" & ords$date <= "2011-08-31"))
# Interestingly, I noticed that the name of the first variable (InvoiceNo) changes after loading the data to R and I am not sure why... I tried setting check.names = FALSE in the read.csv function but it does not help...
head(subdata)
str(subdata)
# Verifying the amount of unique transactions.
length(unique(subdata$ï..InvoiceNo))
# Verifying the amount of unique transactions.
length(unique(subdata$ï..InvoiceNo))
## c)
# 1) Compute the mean of Quantity and UnitPrice:
rowsnum <- nrow(subdata)
sumQ = 0
sumU = 0
for(i in 1:rowsnum){
sumQ = sumQ + subdata$Quantity[i]
sumU = sumU + subdata$UnitPrice[i]
}
meanQ <- sumQ/rowsnum
meanU <- sumU/rowsnum
#Respectively:
print(paste("The mean of Quantity is:", meanQ, "while the mean of UnitPrice is:", meanU))
# I calculated the means also using the two mean functions just to draw a comparison and verify whether my technique works:
mean(subdata$Quantity)
mean(subdata$UnitPrice)
# 2) Determine the types of each column:
i = 1
for(i in c(1:9)) {
print(names(subdata[i]))
print(str(subdata[[i]]))
}
# 3) Compute the number of unique values in each column.
for(i in c(1:9)){
print(names(subdata[i]))
print(length(unique(subdata[[i]])))
}
## d)
# Subset the data for which the transactions took place in the U.K., Netherlands, and Australia:
subdat <- (subset(subdata, subset = subdata$Country == "United Kingdom" | subdata$Country == "Netherlands" | subdata$Country == "Australia"))
head(subdat, 500)
str(subdat)
# 4) Report the average and standard deviation (round them up to 3 decimal points) of the UnitPrice:
print(paste("The average of the UnitPrice is:", round(mean(subdat$UnitPrice), 3)))
print(paste("The standard deviation of the UnitPrice is:", round(sd(subdat$UnitPrice), 3))) #I must say that the value of sd is quite huge...
# 5) Report the number of unique transactions made in these countries.
uniq <- length(unique(subdat$ï..InvoiceNo))
print(paste("The number of unique transactions made in the UK, Netherlands and Australia is:", uniq))
# 6) How many customers residing in these countries made transactions in July and August of 2011?
print(paste("The number of customers residing in the U.K., Netherlands and Australia performing transactions in July and August 2011 is:", length(unique(subdat$CustomerID))))
## e)
head(subdata)
subset_e <- subset(subdata, subset = subdata$Quantity < 0)
head(subset_e)
subset_e <- subset(subdata, subset = subdata$UnitPrice < 0)
head(subset_e)
subset_e <- subset(subdata, subset = subdata$Quantity < 0)
head(subset_e)
head(subset_e, 10)
head(subset_e, 500)
head(subset_e, 1000)
subset_e <- subset(subdata, subset = subdata$UnitPrice < 0)
head(subset_e, 1000)
subset_e <- subset(subdata, subset = subdata$Quantity < 0)
head(subset_e, 1000)
length(subset_e)
str(subset_e)
omit(subset_e)
na.omit(subset_e)
str(subset_e)
subset_e <- subset(subdata, subset = subdata$Quantity < 0)
str(subset_e)
na.omit(subset_e)
str(subset_e)
na.omit(subset_e)
str(subset_e)
is.na(subset_e$CustomerID)
is.na(subset_e$CustomerID) == FALSE
subset_e <- subset(subdata, subset = subdata$Quantity < 0)
str(subset_e)
for(i in 1:nrow(subdat_e)){
if(is.na(subset_e$CustomerID[i]) == FALSE){
na.omit(subset_e$CustomerID[i])
}
}
for(i in 1:nrow(subset_e)){
if(is.na(subset_e$CustomerID[i]) == FALSE){
na.omit(subset_e$CustomerID[i])
}
}
str(subset_e)
head(subset_e, 1000)
na.omit(subset_e$CustomerID)
str(subset_e)
subset_e <- na.omit(subset_e$CustomerID)
str(subset_e)
subset_e <- subset(subdata, subset = subdata$Quantity < 0)
subset_e <- na.omit(subset_e)
str(subset_e)
head(subset_e, 1000)
head(subset_e, 1500)
# 7) How many customers made a refund?
print(paste("The number of customers who made a refund is:", length(unique(subset_e$CustomerID))))
head(subset_e, 100)
print(paste("The total number of refunds is", length(unique(subset_e))))
print(paste("The number of unique customers who made a refund is:", length(unique(subset_e$CustomerID))))
subset_e <- subset(subdata, subset = subdata$Quantity < 0)
# Removing NA values:
subset_e <- na.omit(subset_e)
# 7) How many customers made a refund?
print(paste("The total number of refunds is", length(unique(subset_e))))
print(paste("The number of unique customers who made a refund is:", length(unique(subset_e$CustomerID))))
# 7) How many customers made a refund?
print(paste("The total number of refunds is", length(subset_e)))
# 7) How many customers made a refund?
print(paste("The total number of refunds is", length(subset_e)))
# 7) How many customers made a refund?
print(paste("The total number of refunds is", nrow(subset_e)))
str(subset_e)
# 7) How many customers made a refund?
print(paste("The total number of refunds is", nrow(subset_e)))
# 7) How many customers made a refund?
print(paste("The total number of refunds is", nrow(subset_e), "while the number of unique customers who made a refund is:", length(unique(subset_e$CustomerID)))
print(paste("The total number of refunds is", nrow(subset_e), "while the number of unique customers who made a refund is:", length(unique(subset_e$CustomerID)))
# 7) How many customers made a refund?
print(paste("The total number of refunds is", nrow(subset_e), "while the number of unique customers who made a refund is:", length(unique(subset_e$CustomerID))))
# Assigning the IDs of the customers who made at least one refund during the period into a vector called cust_refund:
cust_refund <- c(unique(subset_e$CustomerID))
cust_refund
print(paste("The total number of refunds is", nrow(subset_e), "while the number of unique customers who made a refund is:", length(unique(subset_e$CustomerID))))
## f) Creating a variable called Sales by multiplying the Quantity and the UnitPrice:
subdata$Sales <- subdata$Quantity * subdata$UnitPrice
head(subdata)
head(subdata, 1500)
# 8) Calculate the total sales amount for those that are missing the CustomerID:
subset_f <- subset(subdata, subset = subdata$CustomerID == NA)
head(subset_f)
# 8) Calculate the total sales amount for those that are missing the CustomerID:
subset_f <- subset(subdata, subset = subdata$CustomerID == is.na())
# 8) Calculate the total sales amount for those that are missing the CustomerID:
subset_f <- subset(subdata, subset = is.na(subdata$CustomerID) == NA)
head(subset_f)
# 8) Calculate the total sales amount for those that are missing the CustomerID:
subset_f <- subset(subdata, subset = is.na(subdata$CustomerID))
head(subset_f)
head(subset_f, 5000)
colSums(subset_f$Sales)
colSums(subset_f)
sum = sum + subset_f$Sales[i]
for(i in 1:nrow(subset_f)){
sum = sum + subset_f$Sales[i]
}
print(paste("The total sales amount for those that are missing the CustomerID is:", sum)
print(paste("The total sales amount for those that are missing the CustomerID is:", sum)
print(paste("The total sales amount for those that are missing the CustomerID is:", sum))
head(subset_f, 5000)
print(paste("The total sales amount for those that are missing the CustomerID is:", round(sum, 2))
print(paste("The total sales amount for those that are missing the CustomerID is:", round(sum, 2)))
print(paste("The total sales amount for those that are missing the CustomerID is:", round(sum, 2)))
head(subdata, 1500)
# 9) How many transactions were made without the customers logging into the e-commerce site?
lenght(is.na(subdata$CustomerID))
# 9) How many transactions were made without the customers logging into the e-commerce site?
length(is.na(subdata$CustomerID))
head(subdata)
str(subdata)
# 9) How many transactions were made without the customers logging into the e-commerce site?
length(is.na(subdata$CustomerID))
# 9) How many transactions were made without the customers logging into the e-commerce site?
length(is.na(subdata)
# 9) How many transactions were made without the customers logging into the e-commerce site?
length(is.na(subdata)
# 9) How many transactions were made without the customers logging into the e-commerce site?
length(is.na(subdata))
# 9) How many transactions were made without the customers logging into the e-commerce site?
length(is.na(subdata))
# 9) How many transactions were made without the customers logging into the e-commerce site?
length(is.na(subset_f))
# 9) How many transactions were made without the customers logging into the e-commerce site?
length(is.na(subset_f))
# 9) How many transactions were made without the customers logging into the e-commerce site?
length(is.na(subset_f$CustomerID))
# 8) Calculate the total sales amount for those that are missing the CustomerID:
subset_f <- subset(subdata, subset = is.na(subdata$CustomerID))
for(i in 1:nrow(subset_f)){
sum = sum + subset_f$Sales[i]
}
print(paste("The total sales amount for those that are missing the CustomerID is:", round(sum, 2)))
head(subset_f)
str(subset_f)
for(i in 1:nrow(subset_f)){
sum = sum + subset_f$Sales[i]
}
print(paste("The total sales amount for those that are missing the CustomerID is:", round(sum, 2)))
# 8) Calculate the total sales amount for those that are missing the CustomerID:
subset_f <- subset(subdata, subset = is.na(subdata$CustomerID))
sum = 0
for(i in 1:nrow(subset_f)){
sum = sum + subset_f$Sales[i]
}
print(paste("The total sales amount for those that are missing the CustomerID is:", round(sum, 2)))
# 9) How many transactions were made without the customers logging into the e-commerce site?
length(is.na(subset_f$CustomerID))
# 9) How many transactions were made without the customers logging into the e-commerce site?
length(is.na(subset_f))
# 9) How many transactions were made without the customers logging into the e-commerce site?
length(is.na(subset_f$CustomerID))
print(paste("The amoun of transactions that were made without the customers logging into the e-commerce site is:", length(is.na(subset_f$CustomerID))
# 9) How many transactions were made without the customers logging into the e-commerce site?
print(paste("The amoun of transactions that were made without the customers logging into the e-commerce site is:", length(is.na(subset_f$CustomerID)))
# 9) How many transactions were made without the customers logging into the e-commerce site?
print(paste("The amoun of transactions that were made without the customers logging into the e-commerce site is:", length(is.na(subset_f$CustomerID))))
## a)
# Importing the data:
ords <- data.frame()
## a)
# Importing the data:
ords <- data.frame()
ords <- read.csv(file = "online_retail.csv", stringsAsFactors = FALSE)
# Verifying that the data has been imported correctly:
head(ords)
str(ords)
## b)
# Converting InvoiceDate variable to date class:
ords$date <- as.Date(x = ords$InvoiceDate , format = "%m/%d/%Y %H:%M")
# Subsetting the data for the period of time between 2011/07 and 2011/08:
subdata <- (subset(ords, subset = ords$date >= "2011-07-01" & ords$date <= "2011-08-31"))
# Verifying the amount of unique transactions.
length(unique(subdata$ï..InvoiceNo))
## c)
# 1) Compute the mean of Quantity and UnitPrice:
rowsnum <- nrow(subdata)
sumQ = 0
sumU = 0
for(i in 1:rowsnum){
sumQ = sumQ + subdata$Quantity[i]
sumU = sumU + subdata$UnitPrice[i]
}
meanQ <- sumQ/rowsnum
meanU <- sumU/rowsnum
#Respectively:
print(paste("The mean of Quantity is:", meanQ, "while the mean of UnitPrice is:", meanU))
#Respectively:
print(paste("The mean of Quantity is:", round(meanQ, 4), "while the mean of UnitPrice is:", round(meanU, 4)))
#Respectively:
print(paste("The mean of Quantity is:", round(meanQ, 3), "while the mean of UnitPrice is:", round(meanU, 3)))
i = 1
for(i in c(1:9)) {
print(names(subdata[i]))
print(str(subdata[[i]]))
}
i = 1
for(i in c(1:9)){
print(names(subdata[i]))
print(length(unique(subdata[[i]])))
}
# 4) Report the average and standard deviation (round them up to 3 decimal points) of the UnitPrice:
print(paste("The average of the UnitPrice is:", round(mean(subdat$UnitPrice), 3)))
print(paste("The standard deviation of the UnitPrice is:", round(sd(subdat$UnitPrice), 3))) #I must say that the value of sd is quite huge...
## d)
# Subset the data for which the transactions took place in the U.K., Netherlands, and Australia:
subdat <- (subset(subdata, subset = subdata$Country == "United Kingdom" | subdata$Country == "Netherlands" | subdata$Country == "Australia"))
# 4) Report the average and standard deviation (round them up to 3 decimal points) of the UnitPrice:
print(paste("The average of the UnitPrice is:", round(mean(subdat$UnitPrice), 3)))
print(paste("The standard deviation of the UnitPrice is:", round(sd(subdat$UnitPrice), 3))) #I must say that the value of sd is quite huge...
print(paste("The average of the UnitPrice is:", round(mean(subdat$UnitPrice), 3)))
print(paste("The standard deviation of the UnitPrice is:", round(sd(subdat$UnitPrice), 3))) #I must say that the value of sd is quite huge...
uniq <- length(unique(subdat$ï..InvoiceNo))
print(paste("The number of unique transactions made in the UK, Netherlands and Australia is:", uniq))
print(paste("The number of customers residing in the U.K., Netherlands and Australia performing transactions in July and August 2011 is:", length(unique(subdat$CustomerID))))
subset_e <- subset(subdata, subset = subdata$Quantity < 0)
# Removing NA values:
subset_e <- na.omit(subset_e)
print(paste("The total number of refunds is", nrow(subset_e), "while the number of unique customers who made a refund is:", length(unique(subset_e$CustomerID))))
## f) Creating a variable called Sales by multiplying the Quantity and the UnitPrice:
subdata$Sales <- subdata$Quantity * subdata$UnitPrice
# 8) Calculate the total sales amount for those that are missing the CustomerID:
subset_f <- subset(subdata, subset = is.na(subdata$CustomerID))
sum = 0
for(i in 1:nrow(subset_f)){
sum = sum + subset_f$Sales[i]
}
print(paste("The total sales amount for those that are missing the CustomerID is:", round(sum, 2)))
print(paste("The amoun of transactions that were made without the customers logging into the e-commerce site is:", length(is.na(subset_f$CustomerID))))
setwd("~/IMBA/SEMESTER 1/5. Programming for Business Analytics/Assignments")
## a)
# Importing the data:
ords <- data.frame()
ords <- read.csv(file = "online_retail.csv", stringsAsFactors = FALSE)
# Verifying that the data has been imported correctly:
head(ords)
str(ords)
str(ords)
str(ords)
## b)
# Converting InvoiceDate variable to date class:
ords$date <- as.Date(x = ords$InvoiceDate , format = "%m/%d/%Y %H:%M")
# Subsetting the data for the period of time between 2011/07 and 2011/08:
subdata <- (subset(ords, subset = ords$date >= as.Date("2011-07-01") & ords$date <= as.Date("2011-08-31")))
# Interestingly, I noticed that the name of the first variable (InvoiceNo) changes after loading the data to R and I am not sure why... I tried setting check.names = FALSE in the read.csv function but it does not help...
head(subdata)
# Interestingly, I noticed that the name of the first variable (InvoiceNo) changes after loading the data to R and I am not sure why... I tried setting check.names = FALSE in the read.csv function but it does not help...
head(subdata)
# Verifying the amount of unique transactions.
length(unique(subdata$ï..InvoiceNo))
rowsnum <- nrow(subdata)
sumQ = 0
sumU = 0
for(i in 1:rowsnum){
sumQ = sumQ + subdata$Quantity[i]
sumU = sumU + subdata$UnitPrice[i]
}
meanQ <- sumQ/rowsnum
meanU <- sumU/rowsnum
#Respectively:
print(paste("The mean of Quantity is:", round(meanQ, 3), "while the mean of UnitPrice is:", round(meanU, 3)))
# I calculated the means also using the two mean functions just to draw a comparison and verify whether my technique works:
mean(subdata$Quantity)
mean(subdata$UnitPrice)
i = 1
for(i in c(1:9)) {
print(names(subdata[i]))
print(str(subdata[[i]]))
}
# 2) Determine the types of each column:
i = 1
for(i in c(1:9)) {
print(names(subdata[i]))
print(class(subdata[[i]]))
}
i = 1
for(i in c(1:9)){
print(names(subdata[i]))
print(length(unique(subdata[[i]])))
}
subdat <- (subset(subdata, subset = subdata$Country == "United Kingdom" | subdata$Country == "Netherlands" | subdata$Country == "Australia"))
unique(subdata$Country)
unique(subdat$Country)
print(paste("The average of the UnitPrice is:", round(mean(subdat$UnitPrice), 3)))
print(paste("The standard deviation of the UnitPrice is:", round(sd(subdat$UnitPrice), 3)))
uniq <- length(unique(subdat$ï..InvoiceNo))
print(paste("The number of unique transactions made in the UK, Netherlands and Australia is:", uniq))
transactions in July and August of 2011?
print(paste("The number of customers residing in the U.K., Netherlands and Australia performing transactions in July and August 2011 is:", length(unique(subdat$CustomerID))))
## e) Checking for customers who obtained a refund:
subset_e <- subset(subdata, subset = subdata$Quantity < 0)
str(subset_e)
## e) Checking for customers who obtained a refund:
unique(subdata$ï..InvoiceNo)
## e) Checking for customers who obtained a refund:
table(nchar(subdata$ï..InvoiceNo))
subset_e <- subset(subdata, subset = nchar(subdata$ï..InvoiceNo) == 7)
str(subset_e)
## e) Checking for customers who obtained a refund:
table(nchar(subdat$ï..InvoiceNo))
## e) Checking for customers who obtained a refund:
table(nchar(subdat$ï..InvoiceNo))
subset_e <- subset(subdat, subset = nchar(subdat$ï..InvoiceNo) == 7)
str(subset_e)
## e) Checking for customers who obtained a refund:
table(nchar(subdata$ï..InvoiceNo))
# Removing NA values:
subset_e <- na.omit(subset_e)
str(subset_e)
str(subset_e)
## e) Checking for customers who obtained a refund:
table(nchar(subdat$ï..InvoiceNo))
subset_e <- subset(subdat, subset = nchar(subdat$ï..InvoiceNo) == 7)
# 7) How many customers made a refund?
print(paste("The total number of refunds is", nrow(subset_e), "while the number of unique customers who made a refund is:", length(unique(subset_e$CustomerID))))
# Assigning the IDs of the customers who made at least one refund during the period into a vector called cust_refund:
cust_refund <- c(unique(subset_e$CustomerID))
cust_refund
print(paste("The total number of refunds is", nrow(subset_e), "while the number of unique customers who made a refund is:", length(unique(subset_e$CustomerID))))
cust_refund <- c(unique(subset_e$CustomerID))
cust_refund
# Non-members:
nonMember <- subset(x = subdat, subset = is.na(subdata$CustomerID))
print(paste("The total number of refunds is", nrow(subset_e), "while the number of unique customers who made a refund is:", length(unique(subset_e$CustomerID))))
and the UnitPrice:
nonMember$Sales <- nonMember$Quantity * nonMember$UnitPrice
head(nonMember)
# 8) Calculate the total sales amount for those that are missing the CustomerID:
sum(nonMember$Sales)
# 8) Calculate the total sales amount for those that are missing the CustomerID:
sum(nonMember$Sales)
nonMember <- subset(x = subdat, subset = is.na(subdata$CustomerID))
nonMember$Sales <- nonMember$Quantity * nonMember$UnitPrice
head(nonMember)
# 8) Calculate the total sales amount for those that are missing the CustomerID:
sum(nonMember$Sales)
# Non-members:
nonMember <- subset(x = subdat, subset = is.na(subdat$CustomerID))
nonMember$Sales <- nonMember$Quantity * nonMember$UnitPrice
head(nonMember)
# 8) Calculate the total sales amount for those that are missing the CustomerID:
sum(nonMember$Sales)
print(paste("The total sales amount for those that are missing the CustomerID is:", round(sum, 2)))
# 9) How many transactions were made without the customers logging into the e-commerce site?
length(unique(nonMember$ï..InvoiceNo))
