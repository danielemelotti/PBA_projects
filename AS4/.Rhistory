data <- na.omit(data)
data$InvoiceDate <- as_date(mdy_hm(data$InvoiceDate))
data <- fread("onlineRetail.csv")
data <- na.omit(data)
data <- fread("onlineRetail.csv")
data
data <- na.omit(data)
data
### 2) Compute the RFM Variables
## c) Convert the InvoiceDate into a date obj. then create a variable called Recency by computing the number of days until the last day of the purchase in the dataset (i.e. Dec. 09, 2011) since last purchase for each customer.
data$InvoiceDate <- as_date(mdy_hm(data$InvoiceDate))
# Creating the Recency variable:
last_day <- max(data$InvoiceDate)
data_R <- data %>%
group_by(CustomerID) %>%
summarise(last_purchase = max(InvoiceDate)) %>%
mutate(Recency = last_day - last_purchase)
data_R
## d) Create a variable called Frequency and Monetary for each customer in the data.
data_FM <- data %>%
group_by(CustomerID) %>%
summarise(Frequency = length(unique(InvoiceNo)),
Monetary = sum(Quantity * UnitPrice))
### 3) Removing Outliers (i.e., Winsorizing)
## e) Visualize the RFM variables with box plots.
# Joining R, F and M in the same dataset:
RFM <- data_R %>%
full_join(data_FM, by = c("CustomerID" = "CustomerID"))
# Converting the RFM variables to numeric:
RFM$Recency <- as.numeric(RFM$Recency)
RFM$Frequency <- as.numeric(RFM$Frequency)
RFM$Monetary <- as.numeric(RFM$Monetary)
# Creating the boxplots:
p1 <- ggplot(RFM, aes(CustomerID, Recency)) +
geom_boxplot(outlier.colour = "red") +
coord_flip()
p2 <- ggplot(RFM, aes(CustomerID, Frequency)) +
geom_boxplot(outlier.colour = "red") +
coord_flip()
p3 <- ggplot(RFM, aes(CustomerID, Monetary)) +
geom_boxplot(outlier.colour = "red") +
coord_flip()
grid.arrange(p1, p2, p3)
# Removing the outliers:
RFM <- RFM %>%
filter(Recency <= quantile(Recency, .99)) %>%
filter(Frequency <= quantile(Frequency, .99)) %>%
filter(Monetary <= quantile(Monetary, .99))
RFM
# Creating a table that will be needed for Question 6:
t1 <- RFM
class(RFM)
summary(RFM)
### 4) Scaling the variables
## g) To prep the data for clustering, we will need to scale the features/variables. Create another data.table.obj. called RFM_scaled which contains the CustomerID and the standardized RFM variables.
RFM_Scaled <- RFM
RFM_Scaled$Recency <- scale(RFM_Scaled$Recency)
RFM_Scaled$Frequency <- scale(RFM_Scaled$Frequency)
RFM_Scaled$Monetary <- scale(RFM_Scaled$Monetary)
# Leaving RFM_Scaled with only the CustomerID variable and the RFM:
RFM_Scaled <- RFM_Scaled %>%
select(-last_purchase)
RFM_Scaled
RFM
# Creating a table that will be needed for Question 6:
t1 <- RFM_Scaled
t1
t2 <- cbind(t1, cluster = unlist(km.out$cluster)) ## create table with scaled values and customerID column
t2
inner_join(x = t2, y = data, by = "CustomerID")
cbind(t1, cluster = km.out$cluster)
cbind(t1, cluster = unlist(km.out$cluster))
t2 <- cbind(t1, cluster = km.out$cluster) ## create table with scaled values and customerID column
t2
## Inner join the raw data(without NA) and the table 2
t3 <- inner_join(x = t2, y = data, by = "CustomerID")
t3 %>%
mutate(Amount = Quantity * UnitPrice,
InvoiceNo = as.factor(InvoiceNo),
StockCode = as.factor(StockCode),
CustomerID = as.factor(CustomerID))
all_data <- t3 %>%
mutate(Amount = Quantity * UnitPrice,
InvoiceNo = as.factor(InvoiceNo),
StockCode = as.factor(StockCode),
CustomerID = as.factor(CustomerID))
## Subset each cluster
cluster1 <- subset(all_data, cluster == 1)
cluster2 <- subset(all_data, cluster == 2)
cluster3 <- subset(all_data, cluster == 3)
cluster4 <- subset(all_data, cluster == 4)
cluster1 %>% group_by(StockCode) %>%
arrange(-Amount) %>%
select(CustomerID, StockCode, Amount) %>%
head(5)
cluster2 %>% group_by(StockCode) %>%
arrange(-Amount) %>%
select(CustomerID, StockCode, Amount) %>%
head(5)
cluster3 %>% group_by(StockCode) %>%
arrange(-Amount) %>%
select(CustomerID, StockCode, Amount) %>%
head(5)
cluster4 %>% group_by(StockCode) %>%
arrange(-Amount) %>%
select(CustomerID, StockCode, Amount) %>%
head(5)
cluster1 <- subset(all_data, cluster == 1)
cluster2 <- subset(all_data, cluster == 2)
cluster3 <- subset(all_data, cluster == 3)
cluster4 <- subset(all_data, cluster == 4)
cluster1 %>% group_by(StockCode) %>%
arrange(-Amount) %>%
select(CustomerID, StockCode, Amount) %>%
head(5)
cluster2 %>% group_by(StockCode) %>%
arrange(-Amount) %>%
select(CustomerID, StockCode, Amount) %>%
head(5)
cluster3 %>% group_by(StockCode) %>%
arrange(-Amount) %>%
select(CustomerID, StockCode, Amount) %>%
head(5)
cluster4 %>% group_by(StockCode) %>%
arrange(-Amount) %>%
select(CustomerID, StockCode, Amount) %>%
head(5)
RFM_Scaled %>%
group_by(Cluster) %>%
summarise(Mean_Rec = mean(Recency),
Mean_Fre = mean(Frequency),
Mean_Mon = mean(Monetary))
### 6) Examining the Clusters
## k) Compute the average of RFM for each cluster. Do we observe any difference between the clusters? Can we label them? Which of the clusters do you think are the most suitable for us to run target marketing campaigns and how?
RFM_Scaled <- data.table(RFM_Scaled)
RFM_Scaled %>%
group_by(Cluster) %>%
summarise(Mean_Rec = mean(Recency),
Mean_Fre = mean(Frequency),
Mean_Mon = mean(Monetary))
### 5) Running K-Means Clustering
## h) Convert RFM_Scaled to a matrix. (p.s., do not forget to remove the CustomerID from the matrix).
RFM_Scaled <- RFM_Scaled %>%
select(-CustomerID) %>%
as.matrix()
## i) Set seed at 2021 and run K-Means clustering (set k = 4).
set.seed(2021)
km.out <- kmeans(RFM_Scaled, centers = 4)
## j) Attach the cluster numbers (i.e. km.out$cluster) onto RFM_Scaled.
RFM_Scaled <- cbind(RFM_Scaled, km.out$cluster)
colnames(RFM_Scaled) <- c(colnames(RFM_Scaled)[1:3], "Cluster")
head(RFM_Scaled)
RFM_Scaled %>%
group_by(Cluster) %>%
summarise(Mean_Rec = mean(Recency),
Mean_Fre = mean(Frequency),
Mean_Mon = mean(Monetary))
### 6) Examining the Clusters
## k) Compute the average of RFM for each cluster. Do we observe any difference between the clusters? Can we label them? Which of the clusters do you think are the most suitable for us to run target marketing campaigns and how?
RFM_Scaled <- data.table(RFM_Scaled)
RFM_Scaled %>%
group_by(Cluster) %>%
summarise(Mean_Rec = mean(Recency),
Mean_Fre = mean(Frequency),
Mean_Mon = mean(Monetary))
t2 <- RFM_Scaled
t1 <- RFM_Scaled
t1
t2 <- cbind(t1, cluster = km.out$cluster) ## create table with scaled values and customerID column
t2
data <- fread("onlineRetail.csv")
data <- na.omit(data)
### 2) Compute the RFM Variables
## c) Convert the InvoiceDate into a date obj. then create a variable called Recency by computing the number of days until the last day of the purchase in the dataset (i.e. Dec. 09, 2011) since last purchase for each customer.
data$InvoiceDate <- as_date(mdy_hm(data$InvoiceDate))
# Creating the Recency variable:
last_day <- max(data$InvoiceDate)
data_R <- data %>%
group_by(CustomerID) %>%
summarise(last_purchase = max(InvoiceDate)) %>%
mutate(Recency = last_day - last_purchase)
## d) Create a variable called Frequency and Monetary for each customer in the data.
data_FM <- data %>%
group_by(CustomerID) %>%
summarise(Frequency = length(unique(InvoiceNo)),
Monetary = sum(Quantity * UnitPrice))
### 3) Removing Outliers (i.e., Winsorizing)
## e) Visualize the RFM variables with box plots.
# Joining R, F and M in the same dataset:
RFM <- data_R %>%
full_join(data_FM, by = c("CustomerID" = "CustomerID"))
# Creating the boxplots:
p1 <- ggplot(RFM, aes(CustomerID, Recency)) +
geom_boxplot(outlier.colour = "red") +
coord_flip()
p2 <- ggplot(RFM, aes(CustomerID, Frequency)) +
geom_boxplot(outlier.colour = "red") +
coord_flip()
p3 <- ggplot(RFM, aes(CustomerID, Monetary)) +
geom_boxplot(outlier.colour = "red") +
coord_flip()
grid.arrange(p1, p2, p3)
# Converting the RFM variables to numeric:
RFM$Recency <- as.numeric(RFM$Recency)
RFM$Frequency <- as.numeric(RFM$Frequency)
RFM$Monetary <- as.numeric(RFM$Monetary)
# Creating the boxplots:
p1 <- ggplot(RFM, aes(CustomerID, Recency)) +
geom_boxplot(outlier.colour = "red") +
coord_flip()
p2 <- ggplot(RFM, aes(CustomerID, Frequency)) +
geom_boxplot(outlier.colour = "red") +
coord_flip()
p3 <- ggplot(RFM, aes(CustomerID, Monetary)) +
geom_boxplot(outlier.colour = "red") +
coord_flip()
grid.arrange(p1, p2, p3)
### 3) Removing Outliers (i.e., Winsorizing)
## e) Visualize the RFM variables with box plots.
# Joining R, F and M in the same dataset:
RFM <- data_R %>%
full_join(data_FM, by = c("CustomerID" = "CustomerID"))
# These are the 99th percentiles for each variable:
quantile(RFM$Recency, 0.99, type = 1)
quantile(RFM$Frequency, 0.99, type = 1)
quantile(RFM$Monetary, 0.99, type = 1)
RFM %>%
filter(Recency <= quantile(Recency, .99)) %>%
filter(Frequency <= quantile(Frequency, .99)) %>%
filter(Monetary <= quantile(Monetary, .99))
# Removing the outliers:
RFM <- RFM %>%
filter(Recency <= quantile(Recency, .99)) %>%
filter(Frequency <= quantile(Frequency, .99)) %>%
filter(Monetary <= quantile(Monetary, .99))
RFM <- data.table(RFM)
### 4) Scaling the variables
## g) To prep the data for clustering, we will need to scale the features/variables. Create another data.table.obj. called RFM_scaled which contains the CustomerID and the standardized RFM variables.
RFM_Scaled <- RFM
RFM_Scaled$Recency <- scale(RFM_Scaled$Recency)
RFM_Scaled$Frequency <- scale(RFM_Scaled$Frequency)
RFM_Scaled$Monetary <- scale(RFM_Scaled$Monetary)
# Leaving RFM_Scaled with only the CustomerID variable and the RFM:
RFM_Scaled <- RFM_Scaled %>%
select(-last_purchase)
RFM_Scaled
# Leaving RFM_Scaled with only the CustomerID variable and the RFM:
RFM_Scaled <- RFM_Scaled %>%
select(-last_purchase)
RFM_Scaled
### 3) Removing Outliers (i.e., Winsorizing)
## e) Visualize the RFM variables with box plots.
# Joining R, F and M in the same dataset:
RFM <- data_R %>%
full_join(data_FM, by = c("CustomerID" = "CustomerID"))
RFM
RFM <- RFM %>%
filter(Recency <= quantile(Recency, .99)) %>%
filter(Frequency <= quantile(Frequency, .99)) %>%
filter(Monetary <= quantile(Monetary, .99))
RFM <- data.table(RFM)
RFM
### 4) Scaling the variables
## g) To prep the data for clustering, we will need to scale the features/variables. Create another data.table.obj. called RFM_scaled which contains the CustomerID and the standardized RFM variables.
RFM_Scaled <- RFM
RFM_Scaled
RFM_Scaled$Recency <- scale(RFM_Scaled$Recency)
RFM_Scaled$Frequency <- scale(RFM_Scaled$Frequency)
RFM_Scaled$Monetary <- scale(RFM_Scaled$Monetary)
# Leaving RFM_Scaled with only the CustomerID variable and the RFM:
RFM_Scaled <- RFM_Scaled %>%
select(-last_purchase)
### 5) Running K-Means Clustering
## h) Convert RFM_Scaled to a matrix. (p.s., do not forget to remove the CustomerID from the matrix).
RFM_Clust <- RFM_Scaled %>%
select(-CustomerID) %>%
as.matrix()
## i) Set seed at 2021 and run K-Means clustering (set k = 4).
set.seed(2021)
km.out <- kmeans(RFM_Clust, centers = 4)
t2
t1
t2
t2 <- cbind(t1, cluster = km.out$cluster) ## create table with scaled values and customerID column
t2
t1 <- RFM_Scaled
t2 <- cbind(t1, cluster = km.out$cluster) ## create table with scaled values and customerID column
## Inner join the raw data(without NA) and the table 2
t3 <- inner_join(x = t2, y = data, by = "CustomerID")
t2
all_data <- t3 %>%
mutate(Amount = Quantity * UnitPrice,
InvoiceNo = as.factor(InvoiceNo),
StockCode = as.factor(StockCode),
CustomerID = as.factor(CustomerID))
## Subset each cluster
cluster1 <- subset(all_data, cluster == 1)
cluster2 <- subset(all_data, cluster == 2)
cluster3 <- subset(all_data, cluster == 3)
cluster4 <- subset(all_data, cluster == 4)
## print out top5 of each top sell
cluster1 %>% group_by(StockCode) %>%
arrange(-Amount) %>%
select(CustomerID, StockCode, Amount) %>%
head(5)
cluster2 %>% group_by(StockCode) %>%
arrange(-Amount) %>%
select(CustomerID, StockCode, Amount) %>%
head(5)
cluster3 %>% group_by(StockCode) %>%
arrange(-Amount) %>%
select(CustomerID, StockCode, Amount) %>%
head(5)
cluster4 %>% group_by(StockCode) %>%
arrange(-Amount) %>%
select(CustomerID, StockCode, Amount) %>%
head(5)
all_data
t2
cluster1 %>% group_by(StockCode) %>%
arrange(-Amount) %>%
select(CustomerID, StockCode, Amount) %>%
head(5)
cluster2 %>% group_by(StockCode) %>%
arrange(-Amount) %>%
select(CustomerID, StockCode, Amount) %>%
head(5)
data
data %>%
filter(StockCode == "M")
cluster1 %>% group_by(StockCode) %>%
arrange(-Amount) %>%
select(CustomerID, StockCode, Amount) %>%
head(5)
data %>%
filter(StockCode == "M",
CustomerID == 12536)
cluster4 %>% group_by(StockCode) %>%
arrange(-Amount) %>%
select(CustomerID, StockCode, Amount) %>%
head(5)
cluster1 %>% group_by(StockCode) %>%
arrange(-Amount) %>%
select(CustomerID, StockCode, Amount) %>%
head(5)
all_data
all_data %>%
filter(StockCode == "M",
CustomerID == 12536)
# Printing out the top5 selling products for each cluster:
cluster1 %>% group_by(StockCode) %>%
select(CustomerID, StockCode, Amount) %>%
head(5)
# Printing out the top5 selling products for each cluster:
cluster1 %>% group_by(StockCode) %>%
arrange(-Amount) %>%
select(CustomerID, StockCode, Amount) %>%
head(5)
cluster2 %>% group_by(StockCode) %>%
arrange(-Amount) %>%
select(CustomerID, StockCode, Amount) %>%
head(5)
cluster3 %>% group_by(StockCode) %>%
arrange(-Amount) %>%
select(CustomerID, StockCode, Amount) %>%
head(5)
cluster4 %>% group_by(StockCode) %>%
arrange(-Amount) %>%
select(CustomerID, StockCode, Amount) %>%
head(5)
# Printing out the top5 selling products for each cluster:
cluster1 %>% group_by(StockCode) %>%
arrange(-Amount) %>%
select(CustomerID, StockCode, Amount) %>%
head(5)
all_data %>%
filter(StockCode == "M",
CustomerID == 12536)
t3 %>%
mutate(Amount = Quantity * UnitPrice,
InvoiceNo = as.factor(InvoiceNo),
StockCode = as.factor(StockCode),
CustomerID = as.factor(CustomerID))
all_data <- t3 %>%
mutate(Amount = Quantity * UnitPrice,
InvoiceNo = as.factor(InvoiceNo),
StockCode = as.factor(StockCode),
CustomerID = as.factor(CustomerID))
str(t3)
all_data
cluster1 %>% group_by(StockCode) %>%
arrange(-Amount) %>%
select(CustomerID, StockCode, Amount) %>%
head(5)
# Requiring all the necessary packages:
require(data.table)
require(lubridate)
require(dplyr)
require(ggplot2)
require(gridExtra)
data <- fread("onlineRetail.csv")
data <- na.omit(data)
# Number of variables and rows:
dim(data)
# Take a look at the data:
head(data)
# Structure of the data:
str(data)
# Summary stats:
summary(data)
# Unique number of customers:
length(unique(data$CustomerID))
# Unique number of products purchased:
length(unique(data$StockCode))
# Unique number of transactions:
length(unique(data$InvoiceNo))
data$InvoiceDate <- as_date(mdy_hm(data$InvoiceDate))
# Creating the Recency variable:
last_day <- max(data$InvoiceDate)
data_R <- data %>%
group_by(CustomerID) %>%
summarise(last_purchase = max(InvoiceDate)) %>%
mutate(Recency = last_day - last_purchase)
data_FM <- data %>%
group_by(CustomerID) %>%
summarise(Frequency = length(unique(InvoiceNo)),
Monetary = sum(Quantity * UnitPrice))
# Joining R, F and M in the same dataset:
RFM <- data_R %>%
full_join(data_FM, by = c("CustomerID" = "CustomerID"))
# Creating the boxplots:
p1 <- ggplot(RFM, aes(CustomerID, Recency)) +
geom_boxplot(outlier.colour = "red") +
coord_flip()
p2 <- ggplot(RFM, aes(CustomerID, Frequency)) +
geom_boxplot(outlier.colour = "red") +
coord_flip()
p3 <- ggplot(RFM, aes(CustomerID, Monetary)) +
geom_boxplot(outlier.colour = "red") +
coord_flip()
grid.arrange(p1, p2, p3)
# These are the 99th percentiles for each variable:
quantile(RFM$Recency, 0.99, type = 1)
quantile(RFM$Frequency, 0.99, type = 1)
quantile(RFM$Monetary, 0.99, type = 1)
# Removing the outliers:
RFM <- RFM %>%
filter(Recency <= quantile(Recency, .99)) %>%
filter(Frequency <= quantile(Frequency, .99)) %>%
filter(Monetary <= quantile(Monetary, .99))
RFM <- data.table(RFM)
summary(RFM)
RFM_Scaled <- RFM
RFM_Scaled$Recency <- scale(RFM_Scaled$Recency)
RFM_Scaled$Frequency <- scale(RFM_Scaled$Frequency)
RFM_Scaled$Monetary <- scale(RFM_Scaled$Monetary)
# Leaving RFM_Scaled with only the CustomerID variable and the RFM:
RFM_Scaled <- RFM_Scaled %>%
select(-last_purchase)
RFM_Clust <- RFM_Scaled %>%
select(-CustomerID) %>%
as.matrix()
set.seed(2021)
km.out <- kmeans(RFM_Clust, centers = 4)
RFM_Clust <- cbind(RFM_Clust, km.out$cluster)
colnames(RFM_Clust) <- c(colnames(RFM_Clust)[1:3], "Cluster")
head(RFM_Clust)
RFM_Clust <- data.table(RFM_Clust)
RFM_Clust %>%
group_by(Cluster) %>%
summarise(Mean_Rec = mean(Recency),
Mean_Fre = mean(Frequency),
Mean_Mon = mean(Monetary))
# As we can see, there are some differences between clusters. Cluster 2 seems to be the one with the most active purchasers, as the frequency is the highest as well as the amount of money spent, while recency is very low (meaning that their last purchase was very recent). Oppositely, Cluster 4 is the one with the least active purchasers, where the value of recency is the highest (meaning that they did no purchase for a long time), while frequency and monetary are very low, meaning that they purchase rarely and spend relatively less money than customers from other clusters. In the middle, we find cluster 1 and 3, with cluster 1 holding customers that spend relatively more and more often, with a more recent latest purchase.
t1 <- RFM_Scaled
# Creating a table holding scaled values, cluster numbers and CustomerID:
t2 <- cbind(t1, cluster = km.out$cluster)
# Performing an inner join between the initial raw data (with NA omitted) and table t2:
t3 <- inner_join(x = t2, y = data, by = "CustomerID")
# Adding a new column called amount = (unit price x quantity):
str(t3)
all_data <- t3 %>%
mutate(Amount = Quantity * UnitPrice,
InvoiceNo = as.factor(InvoiceNo),
StockCode = as.factor(StockCode),
CustomerID = as.factor(CustomerID))
str(t3)
# Subsetting for each cluster:
cluster1 <- subset(all_data, cluster == 1)
cluster2 <- subset(all_data, cluster == 2)
cluster3 <- subset(all_data, cluster == 3)
cluster4 <- subset(all_data, cluster == 4)
# Printing out the top5 selling products for each cluster:
cluster1 %>% group_by(StockCode) %>%
arrange(-Amount) %>%
select(CustomerID, StockCode, Amount) %>%
head(5)
cluster2 %>% group_by(StockCode) %>%
arrange(-Amount) %>%
select(CustomerID, StockCode, Amount) %>%
head(5)
cluster3 %>% group_by(StockCode) %>%
arrange(-Amount) %>%
select(CustomerID, StockCode, Amount) %>%
head(5)
cluster4 %>% group_by(StockCode) %>%
arrange(-Amount) %>%
select(CustomerID, StockCode, Amount) %>%
head(5)
all_data %>%
filter(StockCode == "M",
CustomerID == 12536)
