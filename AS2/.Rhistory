x = "Year",
y = "log2 PM2.5") +
theme_bw()
## d) Identify a monitor in New York State that has data in 1999 and 2012.
# Subsetting the data to include only the observations from New York and only including the County.Code and the Site.ID using filter(), select() and unique():
ny <- pm %>%
filter(State.Code == 36) %>%
select(County.Code, Site.ID) %>%
unique()
## g) Write a block of code to identify the monitor in NY state that had the most data using mutate(), filter(), group_by(), summarize() and arrange().
# Filtering for NY data:
pm %>%
mutate(Site.Code = paste(County.Code, Site.ID, sep = "." )) %>%
filter(year == 1999, year == 2012) %>%
group_by(Site.Code) %>%
summarize(n = n()) %>%
arrange(desc(n))
pm %>%
mutate(Site.Code = paste(County.Code, Site.ID, sep = "." ))
pm %>%
mutate(Site.Code = paste(County.Code, Site.ID, sep = "." )) %>%
filter(year == 1999)
d1 <- fread("https://bit.ly/3c4AHbL", colClasses = list(character = 1:5, numeric = 6:12))
d1 <- fread("https://bit.ly/3c4AHbL", colClasses = list(character = 1:5, numeric = 6:12))
d2 <- fread("https://bit.ly/3nZicL2", colClasses = list(character = 1:5, numeric = 6:12))
## d) Bind the 1999 data and 2012 data and assign the aggregated data to an object called ‘pm’. Then, subset the years from the Date variable and convert it into a factor variable called ‘year’.
pm <- rbind(d1, d2)
# I did not just model the Date variable and rename it because it will be useful later (around 2j)), so I simply created a new variable year:
pm$year <- substr(pm$Date, 1, 4)
# I did not just model the Date variable and rename it because it will be useful later (around 2j)), so I simply created a new variable year:
pm$year <- substr(pm$Date, 1, 4)
pm$year <- as.factor(pm$year)
# I did not just model the Date variable and rename it because it will be useful later (around 2j)), so I simply created a new variable year:
pm$year <- substr(pm$Date, 1, 4)
pm$year <- as.factor(pm$year)
## e) Rename the Sample.Value variable to PM.
pm <- pm %>%
rename(PM = Sample.Value)
## a) Set the seed at 2021 and draw 1,000 randomly selected samples from the data (i.e., pm) using the sampling function in dplyr package.
set.seed(2021)
sample <- sample_n(pm, 1000,na.rm = T)
## b) Create boxplots of all monitor values in 1999 and 2012 using the randomly selected sampled data.
# Taking the log of the PM values (with base 2):
sample$PM <- log(sample$PM, 2)
box <- ggplot(subset(sample), aes(x = year, y = PM, col = year))
box +
geom_boxplot(outlier.size = 1) +
labs(title = "Boxplot of PM values in 1999 and 2012",
x = "Year",
y = "log2 PM2.5") +
theme_bw()
## d) Identify a monitor in New York State that has data in 1999 and 2012.
# Subsetting the data to include only the observations from New York and only including the County.Code and the Site.ID using filter(), select() and unique():
ny <- pm %>%
filter(State.Code == 36) %>%
select(County.Code, Site.ID) %>%
unique()
## e) Create a new variable called Site.Code that combines the county code and the site ID into a single string by using paste() with "." as the separator.
ny$Site.Code <- paste(ny$County.Code, ny$Site.ID, sep = ".")
## f) Find the intersection of the sites in between 1999 and 2012 which gives us the list of monitors in NY operated both in 1999 and 2012 using split() and intersect().
# As I did not manage to obtain a result with the use of both split() and intersect(), I used the following code as an alternative:
ny1 <- pm %>%
filter(State.Code == 36, year == 1999) %>%
select(County.Code, Site.ID) %>%
unique()
ny2 <- pm %>%
filter(State.Code == 36, year == 2012) %>%
select(County.Code, Site.ID) %>%
unique()
inter <- intersect(ny1, ny2)
intersect(ny1, ny2)
inter %>%
mutate(Site.Code = paste(County.Code, Site.ID, sep = "." ))
inter %>%
mutate(Site.Code = paste(County.Code, Site.ID, sep = "." )) %>%
filter(State.Code == "36")
inter %>%
mutate(Site.Code = paste(County.Code, Site.ID, sep = "." ))
## f) Find the intersection of the sites in between 1999 and 2012 which gives us the list of monitors in NY operated both in 1999 and 2012 using split() and intersect().
# As I did not manage to obtain a result with the use of both split() and intersect(), I used the following code as an alternative:
ny1 <- pm %>%
filter(State.Code == 36, year == 1999) %>%
#  select(County.Code, Site.ID) %>%
unique()
ny2 <- pm %>%
filter(State.Code == 36, year == 2012) %>%
#  select(County.Code, Site.ID) %>%
unique()
inter <- intersect(ny1, ny2)
inter
ny2 <- pm %>%
filter(State.Code == 36, year == 2012) %>%
#  select(County.Code, Site.ID) %>%
unique()
ny1 <- pm %>%
filter(State.Code == 36, year == 1999) %>%
#  select(County.Code, Site.ID) %>%
unique()
inter <- intersect(ny1, ny2)
intersect(ny1, ny2)
## f) Find the intersection of the sites in between 1999 and 2012 which gives us the list of monitors in NY operated both in 1999 and 2012 using split() and intersect().
# As I did not manage to obtain a result with the use of both split() and intersect(), I used the following code as an alternative:
ny1 <- pm %>%
filter(State.Code == 36, year == 1999) %>%
select(County.Code, Site.ID) %>%
unique()
ny2 <- pm %>%
filter(State.Code == 36, year == 2012) %>%
select(County.Code, Site.ID) %>%
unique()
inter <- intersect(ny1, ny2)
inter
inter %>%
mutate(Site.Code = paste(County.Code, Site.ID, sep = "." )) %>%
filter(Site.Code)
## g) Write a block of code to identify the monitor in NY state that had the most data using mutate(), filter(), group_by(), summarize() and arrange().
# Filtering for NY data:
inter %>%
mutate(Site.Code = paste(County.Code, Site.ID, sep = "." )) %>%
filter(Site.Code == 101.0003) %>%
group_by(Site.Code) %>%
summarize(n = n()) %>%
arrange(desc(n))
## d) Identify a monitor in New York State that has data in 1999 and 2012.
# Subsetting the data to include only the observations from New York and only including the County.Code and the Site.ID using filter(), select() and unique():
ny <- pm %>%
filter(State.Code == 36) %>%
select(County.Code, Site.ID, year) %>%
unique()
## f) Find the intersection of the sites in between 1999 and 2012 which gives us the list of monitors in NY operated both in 1999 and 2012 using split() and intersect().
# As I did not manage to obtain a result with the use of both split() and intersect(), I used the following code as an alternative:
monitor <- split(ny$Site.Code, ny$year)
## f) Find the intersection of the sites in between 1999 and 2012 which gives us the list of monitors in NY operated both in 1999 and 2012 using split() and intersect().
# As I did not manage to obtain a result with the use of both split() and intersect(), I used the following code as an alternative:
monitor <- split(ny$Site.Code, ny$year)
## f) Find the intersection of the sites in between 1999 and 2012 which gives us the list of monitors in NY operated both in 1999 and 2012 using split() and intersect().
# As I did not manage to obtain a result with the use of both split() and intersect(), I used the following code as an alternative:
monitor <- split(ny$Site.Code, ny$year)
intersect(monitor$"1999", monitor$"2012")
ny1 <- pm %>%
filter(State.Code == 36, year == 1999) %>%
select(County.Code, Site.ID) %>%
unique()
## f) Find the intersection of the sites in between 1999 and 2012 which gives us the list of monitors in NY operated both in 1999 and 2012 using split() and intersect().
# As I did not manage to obtain a result with the use of both split() and intersect(), I used the following code as an alternative:
monitor <- split(ny$Site.Code, ny$year)
## d) Identify a monitor in New York State that has data in 1999 and 2012.
# Subsetting the data to include only the observations from New York and only including the County.Code and the Site.ID using filter(), select() and unique():
ny <- pm %>%
filter(State.Code == 36) %>%
select(County.Code, Site.ID, year) %>%
unique()
## f) Find the intersection of the sites in between 1999 and 2012 which gives us the list of monitors in NY operated both in 1999 and 2012 using split() and intersect().
# As I did not manage to obtain a result with the use of both split() and intersect(), I used the following code as an alternative:
monitor <- split(ny$Site.Code, ny$year)
## d) Identify a monitor in New York State that has data in 1999 and 2012.
# Subsetting the data to include only the observations from New York and only including the County.Code and the Site.ID using filter(), select() and unique():
ny <- pm %>%
mutate(Site.Code = paste(County.Code, Site.ID, sep = "." )) %>%
filter(State.Code == 36) %>%
select(County.Code, Site.ID, year) %>%
unique()
pm %>%
mutate(Site.Code = paste(County.Code, Site.ID, sep = "." )) %>%
filter(State.Code == 36) %>%
select(County.Code, Site.ID, year) %>%
unique()
## d) Identify a monitor in New York State that has data in 1999 and 2012.
# Subsetting the data to include only the observations from New York and only including the County.Code and the Site.ID using filter(), select() and unique():
ny <- pm %>%
mutate(Site.Code = paste(County.Code, Site.ID, sep = "." )) %>%
filter(State.Code == 36) %>%
select(Site.Code, year) %>%
unique()
## d) Identify a monitor in New York State that has data in 1999 and 2012.
# Subsetting the data to include only the observations from New York and only including the County.Code and the Site.ID using filter(), select() and unique():
ny <- pm %>%
filter(State.Code == 36) %>%
select(County.Code, Site.ID, year) %>%
unique()
## e) Create a new variable called Site.Code that combines the county code and the site ID into a single string by using paste() with "." as the separator.
ny$Site.Code <- paste(ny$County.Code, ny$Site.ID, sep = ".")
## f) Find the intersection of the sites in between 1999 and 2012 which gives us the list of monitors in NY operated both in 1999 and 2012 using split() and intersect().
# As I did not manage to obtain a result with the use of both split() and intersect(), I used the following code as an alternative:
monitor <- split(ny$Site.Code, ny$year)
intersect(monitor$"1999", monitor$"2012")
inter <- intersect(monitor$"1999", monitor$"2012")
## g) Write a block of code to identify the monitor in NY state that had the most data using mutate(), filter(), group_by(), summarize() and arrange().
# Filtering for NY data:
inter %>%
mutate(Site.Code = paste(County.Code, Site.ID, sep = "." )) %>%
filter(Site.Code == 101.0003) %>%
group_by(Site.Code) %>%
summarize(n = n()) %>%
arrange(desc(n))
## g) Write a block of code to identify the monitor in NY state that had the most data using mutate(), filter(), group_by(), summarize() and arrange().
# Filtering for NY data:
inter %>%
filter(Site.Code == 101.0003) %>%
group_by(Site.Code) %>%
summarize(n = n()) %>%
arrange(desc(n))
## g) Write a block of code to identify the monitor in NY state that had the most data using mutate(), filter(), group_by(), summarize() and arrange().
# Filtering for NY data:
inter %>%
filter(Site.Code == "101.0003") %>%
group_by(Site.Code) %>%
summarize(n = n()) %>%
arrange(desc(n))
## g) Write a block of code to identify the monitor in NY state that had the most data using mutate(), filter(), group_by(), summarize() and arrange().
# Filtering for NY data:
inter %>%
filter(Site.Code == "101.0003") %>%
group_by(Site.Code) %>%
summarize(n = n()) %>%
arrange(desc(n))
## g) Write a block of code to identify the monitor in NY state that had the most data using mutate(), filter(), group_by(), summarize() and arrange().
# Filtering for NY data:
inter %>%
filter(Site.Code == "101.0003") %>%
group_by(Site.Code) %>%
summarize(n = n()) %>%
arrange(desc(n))
intersect(monitor$"1999", monitor$"2012")
inter %>%
filter(Site.Code == "101.0003")
inter
## g) Write a block of code to identify the monitor in NY state that had the most data using mutate(), filter(), group_by(), summarize() and arrange().
# Filtering for NY data:
pm %>%
filter(Site.Code %in% inter) %>%
group_by(Site.Code) %>%
summarize(n = n()) %>%
arrange(desc(n))
pm
## g) Write a block of code to identify the monitor in NY state that had the most data using mutate(), filter(), group_by(), summarize() and arrange().
# Filtering for NY data:
pm %>%
mutate(Site.Code = paste(County.Code, Site.ID, sep = "." )) %>%
filter(Site.Code %in% inter) %>%
group_by(Site.Code) %>%
summarize(n = n()) %>%
arrange(desc(n))
## d) Identify a monitor in New York State that has data in 1999 and 2012.
# Subsetting the data to include only the observations from New York and only including the County.Code and the Site.ID using filter(), select() and unique():
ny <- pm %>%
filter(State.Code == 36) %>%
select(County.Code, Site.ID) %>%
unique()
ny1 <- pm %>%
filter(State.Code == 36, year == 1999) %>%
select(County.Code, Site.ID) %>%
unique()
ny2 <- pm %>%
filter(State.Code == 36, year == 2012) %>%
select(County.Code, Site.ID) %>%
unique()
inter <- intersect(ny1, ny2)
## g) Write a block of code to identify the monitor in NY state that had the most data using mutate(), filter(), group_by(), summarize() and arrange().
# Filtering for NY data:
pm %>%
mutate(Site.Code = paste(County.Code, Site.ID, sep = "." )) %>%
filter(Site.Code %in% inter) %>%
group_by(Site.Code) %>%
summarize(n = n()) %>%
arrange(desc(n))
## g) Write a block of code to identify the monitor in NY state that had the most data using mutate(), filter(), group_by(), summarize() and arrange().
# Filtering for NY data:
pm %>%
mutate(Site.Code = paste(County.Code, Site.ID, sep = "." )) %>%
filter(Site.Code %in% inter) %>%
group_by(Site.Code) %>%
summarize(n = n()) %>%
arrange(desc(n))
## d) Identify a monitor in New York State that has data in 1999 and 2012.
# Subsetting the data to include only the observations from New York and only including the County.Code and the Site.ID using filter(), select() and unique():
ny <- pm %>%
filter(State.Code == 36) %>%
select(County.Code, Site.ID, year) %>%
unique()
## e) Create a new variable called Site.Code that combines the county code and the site ID into a single string by using paste() with "." as the separator.
ny$Site.Code <- paste(ny$County.Code, ny$Site.ID, sep = ".")
## f) Find the intersection of the sites in between 1999 and 2012 which gives us the list of monitors in NY operated both in 1999 and 2012 using split() and intersect().
# As I did not manage to obtain a result with the use of both split() and intersect(), I used the following code as an alternative:
ny %>%
mutate(year = pm$year)
## f) Find the intersection of the sites in between 1999 and 2012 which gives us the list of monitors in NY operated both in 1999 and 2012 using split() and intersect().
# As I did not manage to obtain a result with the use of both split() and intersect(), I used the following code as an alternative:
ny %>%
mutate(year = pm$year) %>%
monitor <- split(ny$Site.Code, ny$year)
## d) Identify a monitor in New York State that has data in 1999 and 2012.
# Subsetting the data to include only the observations from New York and only including the County.Code and the Site.ID using filter(), select() and unique():
ny <- pm %>%
filter(State.Code == 36) %>%
select(County.Code, Site.ID) %>%
unique()
## e) Create a new variable called Site.Code that combines the county code and the site ID into a single string by using paste() with "." as the separator.
ny$Site.Code <- paste(ny$County.Code, ny$Site.ID, sep = ".")
ny
## f) Find the intersection of the sites in between 1999 and 2012 which gives us the list of monitors in NY operated both in 1999 and 2012 using split() and intersect().
# As I did not manage to obtain a result with the use of both split() and intersect(), I used the following code as an alternative:
ny %>%
select(year)
## d) Identify a monitor in New York State that has data in 1999 and 2012.
# Subsetting the data to include only the observations from New York and only including the County.Code and the Site.ID using filter(), select() and unique():
ny <- pm %>%
filter(State.Code == 36) %>%
select(County.Code, Site.ID, year) %>%
unique()
## e) Create a new variable called Site.Code that combines the county code and the site ID into a single string by using paste() with "." as the separator.
ny$Site.Code <- paste(ny$County.Code, ny$Site.ID, sep = ".")
## f) Find the intersection of the sites in between 1999 and 2012 which gives us the list of monitors in NY operated both in 1999 and 2012 using split() and intersect().
# As I did not manage to obtain a result with the use of both split() and intersect(), I used the following code as an alternative:
monitor <- split(ny$Site.Code, ny$year)
inter <- intersect(monitor$"1999", monitor$"2012")
## g) Write a block of code to identify the monitor in NY state that had the most data using mutate(), filter(), group_by(), summarize() and arrange().
# Filtering for NY data:
pm %>%
mutate(Site.Code = paste(County.Code, Site.ID, sep = "." )) %>%
filter(Site.Code %in% inter) %>%
group_by(Site.Code) %>%
summarize(n = n()) %>%
arrange(desc(n))
## h) Subset the data (i.e. pm) that contains observations from the monitor we just identified (State.Code = 36 & County.Code = 101 & Site.ID = 0003) and assign the subset data to an object called pmsub.
pmsub <- subset(pm, State.Code == "36" & County.Code == "101" & Site.ID == "0003")
pmsub$Date <- as.character(pmsub$Date)
pmsub$Date <- as_date(pmsub$Date, format = "%Y%m%d")
## i) Using the lubridate package, convert the Date variable into a date object and create a variable called yday containing info on day of the year using yday().
require(lubridate)
pmsub$Date <- as_date(pmsub$Date, format = "%Y%m%d")
pmsub$yday <- yday(pmsub$Date)
## j) Draw a scatter plot by mapping the year-day variable on the x-axis, PM2.5 level on the y-axis separately for 1999 and 2012. Make sure to label the x-axis, separate the plots using the facet function and use the base white theme.
sct <- ggplot(pmsub, aes(x = yday, y = PM))
sct +
geom_point() +
labs(x = "Day of the Year", y = "PM") +
facet_wrap(~ year, ncol = 2) +
theme_bw()
## d) Identify a monitor in New York State that has data in 1999 and 2012.
# Subsetting the data to include only the observations from New York and only including the County.Code and the Site.ID using filter(), select() and unique():
ny <- pm %>%
filter(State.Code == 36) %>%
select(County.Code, Site.ID, year) %>%
unique()
## e) Create a new variable called Site.Code that combines the county code and the site ID into a single string by using paste() with "." as the separator.
ny$Site.Code <- paste(ny$County.Code, ny$Site.ID, sep = ".")
## f) Find the intersection of the sites in between 1999 and 2012 which gives us the list of monitors in NY operated both in 1999 and 2012 using split() and intersect().
# As I did not manage to obtain a result with the use of both split() and intersect(), I used the following code as an alternative:
monitor <- split(ny$Site.Code, ny$year)
inter <- intersect(monitor$"1999", monitor$"2012")
intersect(monitor$"1999", monitor$"2012")
## g) Write a block of code to identify the monitor in NY state that had the most data using mutate(), filter(), group_by(), summarize() and arrange().
# Filtering for NY data:
pm %>%
mutate(Site.Code = paste(County.Code, Site.ID, sep = "." )) %>%
filter(Site.Code %in% inter) %>%
group_by(Site.Code) %>%
summarize(n = n()) %>%
arrange(desc(n))
## d) Bind the 1999 data and 2012 data and assign the aggregated data to an object called ‘pm’. Then, subset the years from the Date variable and convert it into a factor variable called ‘year’.
pm <- rbind(d1, d2)
# I did not just model the Date variable and rename it because it will be useful later (around 2j)), so I simply created a new variable year:
pm$year <- substr(pm$Date, 1, 4)
# I did not just model the Date variable and rename it because it will be useful later (around 2j)), so I simply created a new variable year:
pm$year <- substr(pm$Date, 1, 4)
pm$year <- as.factor(pm$year)
## e) Rename the Sample.Value variable to PM.
pm <- pm %>%
rename(PM = Sample.Value)
## a) Set the seed at 2021 and draw 1,000 randomly selected samples from the data (i.e., pm) using the sampling function in dplyr package.
set.seed(2021)
sample <- sample_n(pm, 1000,na.rm = T)
## b) Create boxplots of all monitor values in 1999 and 2012 using the randomly selected sampled data.
# Taking the log of the PM values (with base 2):
sample$PM <- log(sample$PM, 2)
box <- ggplot(subset(sample), aes(x = year, y = PM, col = year))
box +
geom_boxplot(outlier.size = 1) +
labs(title = "Boxplot of PM values in 1999 and 2012",
x = "Year",
y = "log2 PM2.5") +
theme_bw()
## d) Identify a monitor in New York State that has data in 1999 and 2012.
# Subsetting the data to include only the observations from New York and only including the County.Code and the Site.ID using filter(), select() and unique():
ny <- pm %>%
filter(State.Code == 36) %>%
select(County.Code, Site.ID, year) %>%
unique()
## e) Create a new variable called Site.Code that combines the county code and the site ID into a single string by using paste() with "." as the separator.
ny$Site.Code <- paste(ny$County.Code, ny$Site.ID, sep = ".")
## f) Find the intersection of the sites in between 1999 and 2012 which gives us the list of monitors in NY operated both in 1999 and 2012 using split() and intersect().
# As I did not manage to obtain a result with the use of both split() and intersect(), I used the following code as an alternative:
monitor <- split(ny$Site.Code, ny$year)
inter <- intersect(monitor$"1999", monitor$"2012")
## g) Write a block of code to identify the monitor in NY state that had the most data using mutate(), filter(), group_by(), summarize() and arrange().
# Filtering for NY data:
pm %>%
mutate(Site.Code = paste(County.Code, Site.ID, sep = "." )) %>%
filter(Site.Code %in% inter) %>%
group_by(Site.Code) %>%
summarize(n = n()) %>%
arrange(desc(n))
## h) Subset the data (i.e. pm) that contains observations from the monitor we just identified (State.Code = 36 & County.Code = 101 & Site.ID = 0003) and assign the subset data to an object called pmsub.
pmsub <- subset(pm, State.Code == "36" & County.Code == "101" & Site.ID == "0003")
pmsub$Date <- as.character(pmsub$Date)
pmsub$Date <- as_date(pmsub$Date, format = "%Y%m%d")
pmsub$yday <- yday(pmsub$Date)
## j) Draw a scatter plot by mapping the year-day variable on the x-axis, PM2.5 level on the y-axis separately for 1999 and 2012. Make sure to label the x-axis, separate the plots using the facet function and use the base white theme.
sct <- ggplot(pmsub, aes(x = yday, y = PM))
sct +
geom_point() +
labs(x = "Day of the Year", y = "PM") +
facet_wrap(~ year, ncol = 2) +
theme_bw()
pmsub
## d) Identify a monitor in New York State that has data in 1999 and 2012.
# Subsetting the data to include only the observations from New York and only including the County.Code and the Site.ID using filter(), select() and unique():
ny <- pm %>%
filter(State.Code == 36) %>%
select(County.Code, Site.ID, year) %>%
unique()
## e) Create a new variable called Site.Code that combines the county code and the site ID into a single string by using paste() with "." as the separator.
ny$Site.Code <- paste(ny$County.Code, ny$Site.ID, sep = ".")
## f) Find the intersection of the sites in between 1999 and 2012 which gives us the list of monitors in NY operated both in 1999 and 2012 using split() and intersect().
# As I did not manage to obtain a result with the use of both split() and intersect(), I used the following code as an alternative:
monitor <- split(ny$Site.Code, ny$year)
inter <- intersect(monitor$"1999", monitor$"2012")
## g) Write a block of code to identify the monitor in NY state that had the most data using mutate(), filter(), group_by(), summarize() and arrange().
pm %>%
mutate(Site.Code = paste(County.Code, Site.ID, sep = "." )) %>%
filter(Site.Code %in% inter) %>%
group_by(Site.Code) %>%
summarize(n = n()) %>%
arrange(desc(n))
## h) Subset the data (i.e. pm) that contains observations from the monitor we just identified (State.Code = 36 & County.Code = 101 & Site.ID = 0003) and assign the subset data to an object called pmsub.
pmsub <- subset(pm, State.Code == "36" & County.Code == "101" & Site.ID == "0003")
## i) Using the lubridate package, convert the Date variable into a date object and create a variable called yday containing info on day of the year using yday().
require(lubridate)
pmsub$Date <- as.character(pmsub$Date)
pmsub$Date <- as_date(pmsub$Date, format = "%Y%m%d")
pmsub$yday <- yday(pmsub$Date)
## j) Draw a scatter plot by mapping the year-day variable on the x-axis, PM2.5 level on the y-axis separately for 1999 and 2012. Make sure to label the x-axis, separate the plots using the facet function and use the base white theme.
sct <- ggplot(pmsub, aes(x = yday, y = PM))
sct +
geom_point() +
labs(x = "Day of the Year", y = "PM") +
facet_wrap(~ year, ncol = 2) +
theme_bw()
d1 <- fread("https://bit.ly/3c4AHbL", colClasses = list(character = 1:5, numeric = 6:12))
require(data.table)
require(dplyr)
d1 <- fread("https://bit.ly/3c4AHbL", colClasses = list(character = 1:5, numeric = 6:12))
d2 <- fread("https://bit.ly/3nZicL2", colClasses = list(character = 1:5, numeric = 6:12))
## d) Bind the 1999 data and 2012 data and assign the aggregated data to an object called ‘pm’. Then, subset the years from the Date variable and convert it into a factor variable called ‘year’.
pm <- rbind(d1, d2)
# I did not just model the Date variable and rename it because it will be useful later (around 2j)), so I simply created a new variable year:
pm$year <- substr(pm$Date, 1, 4)
# I did not just model the Date variable and rename it because it will be useful later (around 2j)), so I simply created a new variable year:
pm$year <- substr(pm$Date, 1, 4)
pm$year <- as.factor(pm$year)
## e) Rename the Sample.Value variable to PM.
pm <- pm %>%
rename(PM = Sample.Value)
## a) Set the seed at 2021 and draw 1,000 randomly selected samples from the data (i.e., pm) using the sampling function in dplyr package.
set.seed(2021)
sample <- sample_n(pm, 1000,na.rm = T)
## b) Create boxplots of all monitor values in 1999 and 2012 using the randomly selected sampled data.
# Taking the log of the PM values (with base 2):
sample$PM <- log(sample$PM, 2)
# Creating the box plots:
require(ggplot2)
box <- ggplot(subset(sample), aes(x = year, y = PM, col = year))
box +
geom_boxplot(outlier.size = 1) +
labs(title = "Boxplot of PM values in 1999 and 2012",
x = "Year",
y = "log2 PM2.5") +
theme_bw()
## d) Identify a monitor in New York State that has data in 1999 and 2012.
# Subsetting the data to include only the observations from New York and only including the County.Code and the Site.ID using filter(), select() and unique():
ny <- pm %>%
filter(State.Code == 36) %>%
select(County.Code, Site.ID, year) %>%
unique()
## e) Create a new variable called Site.Code that combines the county code and the site ID into a single string by using paste() with "." as the separator.
ny$Site.Code <- paste(ny$County.Code, ny$Site.ID, sep = ".")
## f) Find the intersection of the sites in between 1999 and 2012 which gives us the list of monitors in NY operated both in 1999 and 2012 using split() and intersect().
# As I did not manage to obtain a result with the use of both split() and intersect(), I used the following code as an alternative:
monitor <- split(ny$Site.Code, ny$year)
inter <- intersect(monitor$"1999", monitor$"2012")
## g) Write a block of code to identify the monitor in NY state that had the most data using mutate(), filter(), group_by(), summarize() and arrange().
pm %>%
mutate(Site.Code = paste(County.Code, Site.ID, sep = "." )) %>%
filter(Site.Code %in% inter) %>%
group_by(Site.Code) %>%
summarize(n = n()) %>%
arrange(desc(n))
## h) Subset the data (i.e. pm) that contains observations from the monitor we just identified (State.Code = 36 & County.Code = 101 & Site.ID = 0003) and assign the subset data to an object called pmsub.
pmsub <- subset(pm, State.Code == "36" & County.Code == "101" & Site.ID == "0003")
## i) Using the lubridate package, convert the Date variable into a date object and create a variable called yday containing info on day of the year using yday().
require(lubridate)
pmsub$Date <- as.character(pmsub$Date)
pmsub$Date <- as_date(pmsub$Date, format = "%Y%m%d")
pmsub$yday <- yday(pmsub$Date)
## j) Draw a scatter plot by mapping the year-day variable on the x-axis, PM2.5 level on the y-axis separately for 1999 and 2012. Make sure to label the x-axis, separate the plots using the facet function and use the base white theme.
sct <- ggplot(pmsub, aes(x = yday, y = PM))
sct +
geom_point() +
labs(x = "Day of the Year", y = "PM") +
facet_wrap(~ year, ncol = 2) +
theme_bw()
